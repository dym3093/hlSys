package org.hpin.reportdetail.util;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.imageio.ImageIO;

import org.apache.log4j.Logger;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.hpin.common.core.SpringTool;
import org.hpin.reportdetail.entity.ErpReportdetailImginfo;
import org.hpin.reportdetail.entity.ErpReportdetailImgtask;
import org.hpin.reportdetail.service.ErpReportdetailImginfoService;

/**
 * @author Carly
 * @since 2017年2月9日18:11:56
 * 报告转换图片
 * 
 */
public class DealFileConversionUtil {

	private DealFileConversionUtil(){}
	
	private static DealFileConversionUtil pdfUtil = null;
	
	private static Logger log = Logger.getLogger(DealFileConversionUtil.class);
	
	ErpReportdetailImginfoService imginfoService=(ErpReportdetailImginfoService)SpringTool.getBean(ErpReportdetailImginfoService.class);
	
	/**
	 * 线程安全单例模式
	 * @return DealWithPdfUtil
	 */
	public static synchronized DealFileConversionUtil getInstance(){
		if(pdfUtil == null){
			pdfUtil = new DealFileConversionUtil();
			log.info("DealWithPdfUtil create instance");
		}
		return pdfUtil;
	}
	
	/**
	 * @param imgtask	需要转换的报告,state=0
	 * @param filePath 	property里配置的jpg的路径
	 * @param formatDate 格式化之后的时间,用来生成文件夹
	 * @since 2017年2月9日18:14:00
	 * @author Carly
	 * @return pdf转图片
	 */
//	public List<ErpReportdetailImginfo> dealPdf2Jpg(ErpReportdetailImgtask imgtask,String filePath,String formatDate) throws Exception{
//		long start = System.currentTimeMillis();
//		List<ErpReportdetailImginfo> imgInfoList = new ArrayList<ErpReportdetailImginfo>();
//		Document document = new Document();
//		BufferedImage image = null;
//		document.setFile(imgtask.getFilePath());
//		float scale = 1.5f;//缩放比例
//		float rotation = 0f;//旋转角度
//		         
//		int pages = document.getNumberOfPages();
//		log.info("开始转换为图片,共有"+pages+"张图片---");
//		try {
//			for (int i = 0; i < pages; i++) {
//				log.info("开始转换第"+i+"张图片---");
//				image = (BufferedImage)document.getPageImage(i, GraphicsRenderingHints.SCREEN, org.icepdf.core.pobjects.Page.BOUNDARY_CROPBOX, rotation, scale);
//				RenderedImage rendImage = image;
//				String pdfName = imgtask.getPdfName().substring(0, imgtask.getPdfName().lastIndexOf("."));
//				File file = new File(filePath + formatDate + File.separator + pdfName );
//				if(!file.exists()){
//					file.mkdirs();
//				}
//				String jpgPath = file.getAbsolutePath() + File.separator + imgtask.getCode() + "_" + i + ".jpg";
//				ImageIO.write(rendImage, "png", new File(jpgPath)); //保证其清晰度
//				image.flush();
//				log.info("生成的图片位置:"+jpgPath);
//				ErpReportdetailImginfo imginfo = new ErpReportdetailImginfo();
//				imginfo.setTaskId(imgtask.getId());
//				imginfo.setImgPath(jpgPath);
//				imginfo.setCreateTime(new Date());
//				imginfo.setIsDeleted(0);
//				imgInfoList.add(imginfo);
//				log.info("第"+i+"张图片转换结束---");
//
//			}
//		} catch (Exception e) {
//			throw e;
//			
//		} finally {
//			image = null;
//			document.dispose();//28MB-22s ,1MB-5.6s
//			log.info("转换图片结束,用时:"+(System.currentTimeMillis()-start)/1000+"s");
//			
//		}
//		return imgInfoList;
//	}
	
	/**
	 * @author Carly
	 * @since 2017年2月9日18:14:00
	 * @param imgtask	需要转换的报告,state=0
	 * @param filePath 	property里配置的jpg的路径
	 * @param formatDate 格式化之后的时间,用来生成文件夹
	 * @return pdf转图片
	 */
	public List<ErpReportdetailImginfo> dealPdf2Jpg(ErpReportdetailImgtask imgtask,String filePath,String formatDate)throws Exception {
		long start = System.currentTimeMillis();
		List<ErpReportdetailImginfo> imgInfoList = new ArrayList<ErpReportdetailImginfo>();
		String jpgPath = "";
		PDDocument document = null;
		try {
			document = PDDocument.load(imgtask.getFilePath());
			List pageList = document.getDocumentCatalog().getAllPages();
			int pages = pageList.size();
			log.info("开始转换图片,共有"+pages+"张图片---");
			for(int i=0 ; i < pages; i++){
				log.info("开始转换第"+i+"张图片---");
				PDPage page =  (PDPage)pageList.get(i);
				BufferedImage image = page.convertToImage(BufferedImage.TYPE_INT_RGB,180);
				String pdfName = imgtask.getPdfName().substring(0, imgtask.getPdfName().lastIndexOf("."));
				File file = new File(filePath + formatDate + File.separator + pdfName );
				if(!file.exists()){
					file.mkdirs();
					
				}
				jpgPath = file.getAbsolutePath() + File.separator + imgtask.getCode() + "_" + i + ".jpg";
				log.info("生成图片的位置:"+jpgPath);
				ImageIO.write(image, "jpg", new File(file.getAbsoluteFile()+File.separator+imgtask.getCode()+"_"+i+".jpg"));
				image.flush();
				log.info("第"+i+"张图片转换结束---");
				ErpReportdetailImginfo imginfo = new ErpReportdetailImginfo();
				imginfo.setTaskId(imgtask.getId());
				imginfo.setImgPath(jpgPath);
				imginfo.setCreateTime(new Date());
				imginfo.setIsDeleted(0);
				imgInfoList.add(imginfo);
			}
			
		} catch (Exception e) {
			log.error("转换图片失败---", e);
			throw e;
			
		} finally {
			if (null != document) {
				try {
					document.close();
					log.info("转换图片结束,用时:"+(System.currentTimeMillis()-start)/1000+"s");
				} catch (Exception e2) {
					log.error("关闭document失败", e2);
					
				}
			}
			log.info("转换图片结束,用时:"+(System.currentTimeMillis()-start)/1000+"s");
		}
			
		return imgInfoList;
	}
	
}
