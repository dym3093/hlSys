package org.hpin.venueStaffSettlement.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.hpin.base.customerrelationship.entity.ProjectType;
import org.hpin.common.core.orm.BaseService;
import org.hpin.common.util.DateUtils;
import org.hpin.common.widget.pagination.Page;
import org.hpin.venueStaffSettlement.dao.ErpNonConferenceDao;
import org.hpin.venueStaffSettlement.entity.ErpNonConference;
import org.hpin.venueStaffSettlement.entity.vo.NonConferenceCost;
import org.hpin.venueStaffSettlement.util.ExcelUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


/**
 * @author Carly
 * @since 2017年1月22日12:07:26
 * 非会场费用管理
 */
@Service(value = "org.hpin.venueStaffSettlement.service.ErpNonConferenceService")
@Transactional()
public class ErpNonConferenceService extends BaseService {
	@Autowired
	ErpNonConferenceDao dao;
	Logger logger = Logger.getLogger(ErpNonConferenceService.class);
	
	/**
	 * @param page
	 * @param nonConference
	 */
	public void getNonConferenceList(Page<ErpNonConference> page, ErpNonConference nonConference) {
		dao.getNonConferenceList(page,nonConference);
		
	}

	/**
	 * @param id
	 * @return 删除会议
	 */
	public boolean deleteNonConference(String id) throws Exception{
		int count = dao.deleteNonConference(id);
		switch (count) {
		case 1:
			return true;
		default:
			return false;
		}
	}

	/**
	 * @param projectType
	 * @return 通过id获取项目信息
	 */
	public ProjectType getProjectInfo(String projectType) {
		return dao.getProjectInfo(projectType);
	}

	/**
	 * @param excelPath 生成好的Excel存放路径
	 * @param nonConference 查询条件
	 * @author Carly
	 * @since 2017年4月7日17:51:08
	 * 导出非会场费用
	 */
	public String exportNonConferenceCost(String excelPath, ErpNonConference nonConference) throws Exception{
		ServletContext context =  ServletActionContext.getServletContext();
		String excelModelPath=context.getRealPath("excelModel/nonConferenceCost.xlsx");		//模板位置
		String fileName = DateUtils.toStr(new Date()) + ".xlsx";							//生成的excel名字
		String execelSavePath = excelPath + fileName;										//存放位置
	    File file = new File(execelSavePath);
	    OutputStream os = new FileOutputStream(file);
	    
	    ExcelUtils excel = new ExcelUtils();
	    List<Map<Integer, Object>> datalist = dataList(nonConference);
        //必须为列表头部所有位置集合，   输出 数据单元格样式和头部单元格样式保持一致, 该数组是第一行数据输出位置,从0开始
        String[] heads = new String[]{"A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1"};  
        excel.writeDateList(excelModelPath,heads,datalist,0);
        //写到输出流并移除资源
        excel.writeAndClose(excelModelPath, os);
          
        os.flush();
        os.close();
	    return execelSavePath;
	}
	
	/**
	 * @author Carly
	 * @since 2017年4月7日20:15:05
	 * @param nonConference
	 * @return 组装需要生成Excel的数据
	 * @throws Exception
	 */
	private List<Map<Integer, Object>> dataList(ErpNonConference nonConference) throws Exception {
		List<Map<Integer, Object>> dataList = new ArrayList<Map<Integer,Object>>();
	    List<NonConferenceCost> list = queryForList(nonConference);
	    for (NonConferenceCost cost:list) {
	    	int count = 1;
	    	//0=S15B10BX, 1=王海龙, 2=甘肃国寿基因项目, 3=null, 4=2.0, 5=2.0, 6=0.0, 7=0.0, 8=0.0, 9=4.0
	        Map<Integer, Object> data = new HashMap<Integer,Object>();
	        data.put(count++, cost.getProjectCode());
	        data.put(count++, cost.getProjectUser());
	        data.put(count++, cost.getProjectName());
	        data.put(count++, cost.getName());
	        data.put(count++, cost.getTravelCost().doubleValue());
	        data.put(count++, cost.getCityCost().doubleValue());
	        data.put(count++, cost.getProvinceCost().doubleValue());
	        data.put(count++, cost.getHotelCost().doubleValue());
	        data.put(count++, cost.getLaborCost().doubleValue());
	        data.put(count++, cost.getOtherCost().doubleValue());
	        data.put(count++, cost.getAmount().doubleValue());
	        dataList.add(data);
	    }
	    return dataList;
	}
	
	/**
	 * @author Carly
	 * @since 2017-4-7 18:57:14
	 * @param nonConference
	 * @return 获取查询后的结果
	 * @throws Exception
	 */
	private List<NonConferenceCost> queryForList(ErpNonConference nonConference) throws Exception{
		List<NonConferenceCost> list = dao.queryForList(nonConference);
		return list;
	}
	
}
